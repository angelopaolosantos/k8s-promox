---
# file: roles/common/tasks/prerequisites.yaml

- name: Ping my hosts
  ansible.builtin.ping:

- name: Print message
  ansible.builtin.debug:
    msg: Installing Kubernetes Requirements...

- name: Forwarding IPv4 and letting iptables see bridged traffic
  shell:
    cmd: |
      cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
      overlay
      br_netfilter
      EOF
  args: 
    creates: /etc/modules-load.d/k8s.conf

- name: Enable overlay module
  shell:
    cmd: modprobe overlay

- name: Enable br_netfilter module
  shell:
    cmd: modprobe br_netfilter

- name: Save sysctl params required by setup, params persist across reboots
  shell:
    cmd: |
      cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
      EOF
  args: 
    creates: /etc/sysctl.d/k8s.conf

- name: Apply sysctl params without reboot
  shell:
    cmd: sysctl --system

- name: Verify overlay is loaded
  shell:
    cmd: lsmod | grep overlay
  register: msg1

- name: Verify br_netfilter is loaded
  shell:
    cmd: lsmod | grep br_netfilter
  register: msg2

- name: Verify that the net.bridge.bridge-nf-call-iptables, net.bridge.bridge-nf-call-ip6tables, net.ipv4.ip_forward system variables are set to 1
  shell:
    cmd: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
  register: msg3

- debug: var=msg1.stdout_lines
- debug: var=msg2.stdout_lines
- debug: var=msg3.stdout_lines

# - name: download containerd sources
#   get_url:
#     url: https://github.com/containerd/containerd/releases/download/v1.7.15/containerd-1.7.15-linux-amd64.tar.gz
#     dest: /etc/containerd.tar.gz

# - name: extract containerd file
#   unarchive:
#     src: /etc/containerd.tar.gz
#     dest: /usr/local
#     remote_src: yes

# - name: download containerd service file
#   get_url:
#     url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
#     dest: /etc/systemd/system/containerd.service

- name: Update apt and install containerd
  apt:
    update_cache: yes
    pkg:
      - containerd

- name: Create /etc/containerd Directory
  file:
    path: /etc/containerd/
    state: directory

- name: Create containerd config file
  shell:
    cmd: containerd config default | sudo tee /etc/containerd/config.toml

- name: Update to SystemdCgroup value to True
  shell:
    cmd: sudo sed -i 's/ SystemdCgroup = false/ SystemdCgroup = true/' /etc/containerd/config.toml

- name: systemctl daemon-reload
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable service httpd and ensure it is not masked
  ansible.builtin.systemd:
    name: containerd
    enabled: yes
    masked: no
    state: started

# - name: Download runc.amd64
#   get_url:
#     url: https://github.com/opencontainers/runc/releases/download/v1.2.0-rc.1/runc.amd64
#     dest: /etc/runc.amd64

# - name: Install runc.amd64
#   shell:
#     cmd: install -m 755 /etc/runc.amd64 /usr/local/sbin/runc
#   args: 
#     creates: /usr/local/sbin/runc

- name: Download CNI Plugins
  get_url:
    url: https://github.com/containernetworking/plugins/releases/download/v1.4.1/cni-plugins-linux-amd64-v1.4.1.tgz
    dest: /etc/cni-plugins.tgz

- name: Create /opt/cni/bin Directory
  file:
    path: /opt/cni/bin
    state: directory

- name: Extract cni-plugins file
  unarchive:
    src: /etc/cni-plugins.tgz
    dest: /opt/cni/bin
    remote_src: yes

- name: Update apt and install apt-transport-https, ca-certificates, curl, gpg
  apt:
    update_cache: yes
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
      - nfs-common

- name: Create /etc/apt/keyrings/ Directory
  file:
    path: /etc/apt/keyrings/
    state: directory

- name: Download public signing key for Kubernetes package repositories
  shell:
    cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Update APT sources list
  shell:
    cmd: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
  # args: 
  #   creates: /etc/apt/sources.list.d/kubernetes.list

- name: Update apt and install kubelet, kubeadm, kubectl
  apt:
    update_cache: yes
    pkg:
      - kubelet
      - kubeadm
      - kubectl

- name: Prevent kubelet from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubelet
    selection: hold

- name: Prevent kubeadm from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubeadm
    selection: hold

- name: Prevent kubectl from being upgraded
  ansible.builtin.dpkg_selections:
    name: kubectl
    selection: hold